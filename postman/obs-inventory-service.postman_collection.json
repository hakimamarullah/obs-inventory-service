{
	"info": {
		"_postman_id": "626afc9a-c009-4540-9e6c-bfdaef48abbd",
		"name": "obs-inventory-service",
		"description": "OBS Inventory\n\nContact Support:\n Name: Hakim Amarullah\n Email: hakimamarullah@gmail.com",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "19278069"
	},
	"item": [
		{
			"name": "v1",
			"item": [
				{
					"name": "orders",
					"item": [
						{
							"name": "{orderNo}",
							"item": [
								{
									"name": "Get order by order number",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/v1/orders/:orderNo",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v1",
												"orders",
												":orderNo"
											],
											"variable": [
												{
													"key": "orderNo",
													"value": "20250600000008",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/v1/orders/:orderNo",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v1",
														"orders",
														":orderNo"
													],
													"variable": [
														{
															"key": "orderNo"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"code\": 75826371,\n  \"message\": \"commodo nostrud\",\n  \"data\": {\n    \"createdDate\": \"1953-02-22T01:26:22.755Z\",\n    \"updatedDate\": \"1978-08-03T03:17:36.866Z\",\n    \"updatedBy\": \"ex in cillum\",\n    \"createdBy\": \"magna reprehenderit\",\n    \"orderNo\": \"cupidatat\",\n    \"itemId\": 28067699,\n    \"itemName\": \"deserunt voluptate cillum sunt ut\",\n    \"qty\": -86390571,\n    \"price\": -43893516.7955266\n  }\n}"
										}
									]
								},
								{
									"name": "Delete order by order number",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Response status code is 404\", function () {",
													"    pm.expect(pm.response.code).to.eql(404);",
													"});",
													"",
													"",
													"pm.test(\"Response contains valid JSON format\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData).to.have.all.keys('code', 'data', 'message');",
													"});",
													"",
													"",
													"pm.test(\"Response includes a message field\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData).to.have.property('message');",
													"});",
													"",
													"",
													"pm.test(\"The message field must be a non-empty string\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData.message).to.exist.and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
													"});",
													"",
													"",
													"pm.test(\"Response time is less than 200ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/v1/orders/:orderNo",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v1",
												"orders",
												":orderNo"
											],
											"variable": [
												{
													"key": "orderNo",
													"value": "20250600000008",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/v1/orders/:orderNo",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v1",
														"orders",
														":orderNo"
													],
													"variable": [
														{
															"key": "orderNo"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"code\": 55124015,\n  \"message\": \"commodo est laborum Duis\",\n  \"data\": \"labore\"\n}"
										}
									]
								}
							]
						},
						{
							"name": "Get all orders with pagination",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.eql(200);",
											"});",
											"",
											"",
											"pm.test(\"Response Content-Type is application/json\", function () {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include(\"application/json\");",
											"});",
											"",
											"",
											"pm.test(\"Validate the structure of the 'data' object\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.data).to.be.an('object').that.includes.all.keys('content', 'page');",
											"    ",
											"    pm.expect(responseData.data.content).to.be.an('array');",
											"    ",
											"    pm.expect(responseData.data.page).to.be.an('object').that.includes.all.keys('number', 'size', 'totalElements', 'totalPages');",
											"    pm.expect(responseData.data.page.number).to.be.a('number');",
											"    pm.expect(responseData.data.page.size).to.be.a('number');",
											"    pm.expect(responseData.data.page.totalElements).to.be.a('number');",
											"    pm.expect(responseData.data.page.totalPages).to.be.a('number');",
											"});",
											"",
											"",
											"pm.test(\"The 'page' object contains required fields\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.data).to.be.an('object');",
											"    pm.expect(responseData.data.page).to.be.an('object').that.includes.all.keys('number', 'size', 'totalElements', 'totalPages');",
											"});",
											"",
											"",
											"pm.test(\"Content is an empty array when there are no orders\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.data.content).to.be.an('array').that.is.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/orders?page=0&size=20",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"orders"
									],
									"query": [
										{
											"key": "page",
											"value": "0",
											"description": "Zero-based page index (0..N)"
										},
										{
											"key": "size",
											"value": "20",
											"description": "The size of the page to be returned"
										}
									]
								}
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/v1/orders?page=0&size=20&sort=incididunt ea",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v1",
												"orders"
											],
											"query": [
												{
													"key": "page",
													"value": "0",
													"description": "Zero-based page index (0..N)"
												},
												{
													"key": "size",
													"value": "20",
													"description": "The size of the page to be returned"
												},
												{
													"key": "sort",
													"value": "incididunt ea",
													"description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 70896725,\n  \"message\": \"laborum proident\",\n  \"data\": {\n    \"content\": [\n      {\n        \"createdDate\": \"2005-03-01T15:55:11.656Z\",\n        \"updatedDate\": \"1988-05-02T19:40:35.340Z\",\n        \"updatedBy\": \"minim anim aliquip dolore pariatur\",\n        \"createdBy\": \"elit\",\n        \"orderNo\": \"nisi non occaecat in\",\n        \"itemId\": -91528127,\n        \"itemName\": \"irure est\",\n        \"qty\": 39160484,\n        \"price\": 40098712.46467185\n      },\n      {\n        \"createdDate\": \"1966-12-27T10:56:15.585Z\",\n        \"updatedDate\": \"2012-11-04T20:14:37.027Z\",\n        \"updatedBy\": \"qui veniam\",\n        \"createdBy\": \"ali\",\n        \"orderNo\": \"aute exercitation sit\",\n        \"itemId\": 35796707,\n        \"itemName\": \"culpa sint\",\n        \"qty\": 72907647,\n        \"price\": 76943893.2549997\n      }\n    ],\n    \"page\": {\n      \"size\": 37639519,\n      \"number\": 77305685,\n      \"totalElements\": 84009533,\n      \"totalPages\": -21414400\n    }\n  }\n}"
								}
							]
						},
						{
							"name": "Update existing order",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 404\", function () {",
											"    pm.expect(pm.response.code).to.eql(404);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields: code, data, and message\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData).to.have.all.keys('code', 'data', 'message');",
											"});",
											"",
											"",
											"pm.test(\"Code is a non-negative integer\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.code).to.exist.and.to.be.a('number').and.to.be.at.least(0);",
											"});",
											"",
											"",
											"pm.test(\"Message is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.message).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"orderNo\": \"20250600000008\",\n  \"price\": 1057451.6371341548,\n  \"qty\": 4,\n  \"itemId\": 9\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/orders",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"orders"
									]
								}
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"orderNo\": \"laboris adipisicing occaecat Ut\",\n  \"price\": 1057451.6371341548,\n  \"qty\": 73502054,\n  \"itemId\": 54121532\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/v1/orders",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v1",
												"orders"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 75826371,\n  \"message\": \"commodo nostrud\",\n  \"data\": {\n    \"createdDate\": \"1953-02-22T01:26:22.755Z\",\n    \"updatedDate\": \"1978-08-03T03:17:36.866Z\",\n    \"updatedBy\": \"ex in cillum\",\n    \"createdBy\": \"magna reprehenderit\",\n    \"orderNo\": \"cupidatat\",\n    \"itemId\": 28067699,\n    \"itemName\": \"deserunt voluptate cillum sunt ut\",\n    \"qty\": -86390571,\n    \"price\": -43893516.7955266\n  }\n}"
								}
							]
						},
						{
							"name": "Create new order",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.eql(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has required fields\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData).to.have.all.keys('code', 'data', 'message');",
											"});",
											"",
											"",
											"pm.test(\"The orderNo in data must be a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.data).to.exist.and.to.be.an('object');",
											"    pm.expect(responseData.data.orderNo).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Price and quantity must be non-negative integers\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.data.price).to.be.a('number').and.to.be.at.least(0);",
											"    pm.expect(responseData.data.qty).to.be.a('number').and.to.be.at.least(0);",
											"});",
											"",
											"",
											"pm.test(\"CreatedDate and UpdatedDate are in valid date format\", function () {",
											"    const responseData = pm.response.json().data;",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    ",
											"    const datePattern = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d{3})?Z$/; // ISO 8601 format",
											"",
											"    pm.expect(responseData.createdDate).to.match(datePattern, \"CreatedDate is not in a valid date format\");",
											"    pm.expect(responseData.updatedDate).to.match(datePattern, \"UpdatedDate is not in a valid date format\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"itemId\": 4,\n  \"qty\": 2\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/orders",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"orders"
									]
								}
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"itemId\": 80549438,\n  \"qty\": 81338589\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/v1/orders",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v1",
												"orders"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 75826371,\n  \"message\": \"commodo nostrud\",\n  \"data\": {\n    \"createdDate\": \"1953-02-22T01:26:22.755Z\",\n    \"updatedDate\": \"1978-08-03T03:17:36.866Z\",\n    \"updatedBy\": \"ex in cillum\",\n    \"createdBy\": \"magna reprehenderit\",\n    \"orderNo\": \"cupidatat\",\n    \"itemId\": 28067699,\n    \"itemName\": \"deserunt voluptate cillum sunt ut\",\n    \"qty\": -86390571,\n    \"price\": -43893516.7955266\n  }\n}"
								}
							]
						}
					]
				},
				{
					"name": "items",
					"item": [
						{
							"name": "{id}",
							"item": [
								{
									"name": "Get item by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"",
													"pm.test(\"Content-Type is application/json\", function () {",
													"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
													"});",
													"",
													"",
													"pm.test(\"Validate the data object\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData.data).to.exist.and.to.be.an('object');",
													"",
													"    pm.expect(responseData.data).to.have.all.keys('createdBy', 'createdDate', 'id', 'name', 'price', 'remainingStock', 'updatedBy', 'updatedDate');",
													"",
													"    pm.expect(responseData.data.createdBy).to.be.a('string');",
													"    pm.expect(responseData.data.createdDate).to.be.a('string');",
													"    pm.expect(responseData.data.id).to.be.a('number');",
													"    pm.expect(responseData.data.name).to.be.a('string');",
													"    pm.expect(responseData.data.price).to.be.a('number');",
													"    pm.expect(responseData.data.remainingStock).to.be.a('number');",
													"    pm.expect(responseData.data.updatedBy).to.be.a('string');",
													"    pm.expect(responseData.data.updatedDate).to.be.a('string');",
													"});",
													"",
													"",
													"pm.test(\"The name must be a non-empty string\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData.data).to.exist;",
													"    pm.expect(responseData.data.name).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
													"});",
													"",
													"",
													"pm.test(\"Price and remainingStock must be non-negative integers\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData.data).to.exist.and.to.be.an('object');",
													"    ",
													"    pm.expect(responseData.data.price).to.be.a('number').and.to.be.at.least(0, \"Price should be a non-negative integer\");",
													"    pm.expect(responseData.data.remainingStock).to.be.a('number').and.to.be.at.least(0, \"Remaining stock should be a non-negative integer\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/v1/items/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v1",
												"items",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "7",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/v1/items/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v1",
														"items",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"code\": 39435194,\n  \"message\": \"ex\",\n  \"data\": {\n    \"createdDate\": \"1976-09-12T22:39:17.130Z\",\n    \"updatedDate\": \"1996-04-01T15:23:18.040Z\",\n    \"updatedBy\": \"ex elit proident\",\n    \"createdBy\": \"ullamco minim\",\n    \"id\": -64473739,\n    \"name\": \"ex dolore aliquip nisi\",\n    \"price\": 63794935.25015864,\n    \"remainingStock\": 70889336\n  }\n}"
										}
									]
								},
								{
									"name": "Delete item by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Response status code is 404\", function () {",
													"    pm.expect(pm.response.code).to.eql(404);",
													"});",
													"",
													"",
													"pm.test(\"Response has required fields\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData).to.have.all.keys('code', 'message');",
													"});",
													"",
													"",
													"pm.test(\"Code is a non-negative integer\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData.code).to.exist.and.to.be.a('number').and.to.be.at.least(0);",
													"});",
													"",
													"",
													"pm.test(\"Message is a non-empty string\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData.message).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
													"});",
													"",
													"",
													"pm.test(\"Response time is less than 200ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/v1/items/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v1",
												"items",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "10",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/v1/items/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v1",
														"items",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"code\": 55124015,\n  \"message\": \"commodo est laborum Duis\",\n  \"data\": \"labore\"\n}"
										}
									]
								}
							]
						},
						{
							"name": "Get All items with pagination",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"",
											"pm.test(\"Response contains a valid Content-Type header\", function () {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
											"});",
											"",
											"",
											"pm.test(\"Validate the 'data' object structure\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.data).to.exist.and.to.be.an('object');",
											"    pm.expect(responseData.data.content).to.exist.and.to.be.an('array');",
											"    pm.expect(responseData.data.page).to.exist.and.to.be.an('object');",
											"",
											"    responseData.data.content.forEach(item => {",
											"        pm.expect(item).to.be.an('object');",
											"        pm.expect(item).to.have.all.keys('createdBy', 'createdDate', 'id', 'name', 'price', 'remainingStock', 'updatedBy', 'updatedDate');",
											"        pm.expect(item.createdBy).to.be.a('string');",
											"        pm.expect(item.name).to.be.a('string');",
											"        pm.expect(item.price).to.be.a('number');",
											"        pm.expect(item.remainingStock).to.be.a('number');",
											"    });",
											"",
											"    pm.expect(responseData.data.page).to.have.all.keys('number', 'size', 'totalElements', 'totalPages');",
											"    pm.expect(responseData.data.page.number).to.be.a('number');",
											"    pm.expect(responseData.data.page.size).to.be.a('number');",
											"    pm.expect(responseData.data.page.totalElements).to.be.a('number');",
											"    pm.expect(responseData.data.page.totalPages).to.be.a('number');",
											"});",
											"",
											"",
											"pm.test(\"Content is an array and has the expected fields\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.data).to.have.property('content').that.is.an('array');",
											"",
											"    responseData.data.content.forEach(item => {",
											"        pm.expect(item).to.be.an('object');",
											"        pm.expect(item).to.have.all.keys('createdBy', 'createdDate', 'id', 'name', 'price', 'remainingStock', 'updatedBy', 'updatedDate');",
											"        pm.expect(item.name).to.be.a('string');",
											"        pm.expect(item.price).to.be.a('number');",
											"        pm.expect(item.remainingStock).to.be.a('number');",
											"    });",
											"});",
											"",
											"",
											"pm.test(\"Price and Remaining Stock must be non-negative numbers\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    ",
											"    responseData.data.content.forEach(item => {",
											"        pm.expect(item.price).to.be.a('number').and.to.be.at.least(0, \"Price should be non-negative\");",
											"        pm.expect(item.remainingStock).to.be.a('number').and.to.be.at.least(0, \"Remaining Stock should be non-negative\");",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/items?page=0&size=20",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"items"
									],
									"query": [
										{
											"key": "page",
											"value": "0",
											"description": "Zero-based page index (0..N)"
										},
										{
											"key": "size",
											"value": "20",
											"description": "The size of the page to be returned"
										}
									]
								}
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/v1/items?page=0&size=20&sort=incididunt ea",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v1",
												"items"
											],
											"query": [
												{
													"key": "page",
													"value": "0",
													"description": "Zero-based page index (0..N)"
												},
												{
													"key": "size",
													"value": "20",
													"description": "The size of the page to be returned"
												},
												{
													"key": "sort",
													"value": "incididunt ea",
													"description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 52972777,\n  \"message\": \"est officia\",\n  \"data\": {\n    \"content\": [\n      {\n        \"createdDate\": \"2008-10-18T01:21:59.639Z\",\n        \"updatedDate\": \"1963-07-08T15:50:00.725Z\",\n        \"updatedBy\": \"est in nulla\",\n        \"createdBy\": \"pariatur fugiat anim in\",\n        \"id\": -63084886,\n        \"name\": \"amet\",\n        \"price\": 91282925.09601602,\n        \"remainingStock\": -42253410\n      },\n      {\n        \"createdDate\": \"2015-06-08T15:37:43.333Z\",\n        \"updatedDate\": \"2024-12-24T01:44:48.023Z\",\n        \"updatedBy\": \"non\",\n        \"createdBy\": \"officia est eiusmod Duis reprehenderit\",\n        \"id\": -33812750,\n        \"name\": \"in Excepteur\",\n        \"price\": -29016363.087135628,\n        \"remainingStock\": 89198460\n      }\n    ],\n    \"page\": {\n      \"size\": -29733403,\n      \"number\": -39284198,\n      \"totalElements\": -61752731,\n      \"totalPages\": -81764107\n    }\n  }\n}"
								}
							]
						},
						{
							"name": "Update item",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.eql(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has required fields: code, data, and message\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object').that.includes.all.keys('code', 'data', 'message');",
											"});",
											"",
											"",
											"pm.test(\"Validate the structure of the data object\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.data).to.be.an('object').that.includes.all.keys('createdBy', 'createdDate', 'id', 'name', 'price', 'remainingStock', 'updatedBy', 'updatedDate');",
											"",
											"    pm.expect(responseData.data.createdBy).to.be.a('string');",
											"    pm.expect(responseData.data.createdDate).to.be.a('string');",
											"    pm.expect(responseData.data.id).to.be.a('number');",
											"    pm.expect(responseData.data.name).to.be.a('string');",
											"    pm.expect(responseData.data.price).to.be.a('number');",
											"    pm.expect(responseData.data.remainingStock).to.be.a('number');",
											"    pm.expect(responseData.data.updatedBy).to.be.a('string');",
											"    pm.expect(responseData.data.updatedDate).to.be.a('string');",
											"});",
											"",
											"",
											"pm.test(\"Price and remainingStock must be non-negative integers\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.data).to.exist.and.to.be.an('object');",
											"",
											"    pm.expect(responseData.data.price).to.be.a('number').and.to.be.at.least(0, \"Price should be a non-negative integer\");",
											"    pm.expect(responseData.data.remainingStock).to.be.a('number').and.to.be.at.least(0, \"Remaining stock should be a non-negative integer\");",
											"});",
											"",
											"",
											"pm.test(\"CreatedDate and UpdatedDate must be in a valid date format\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.data).to.exist.and.to.be.an('object');",
											"    ",
											"    const datePattern = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/; // ISO 8601 format",
											"    ",
											"    pm.expect(responseData.data.createdDate).to.match(datePattern, \"CreatedDate should be in valid date format\");",
											"    pm.expect(responseData.data.updatedDate).to.match(datePattern, \"UpdatedDate should be in valid date format\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": 5,\n  \"name\": \"New Balance Shoe\",\n  \"price\": 49614449.18031528\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/items",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"items"
									]
								}
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": -75223314,\n  \"name\": \"dolore Duis nulla\",\n  \"price\": 49614449.18031528\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/v1/items",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v1",
												"items"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 39435194,\n  \"message\": \"ex\",\n  \"data\": {\n    \"createdDate\": \"1976-09-12T22:39:17.130Z\",\n    \"updatedDate\": \"1996-04-01T15:23:18.040Z\",\n    \"updatedBy\": \"ex elit proident\",\n    \"createdBy\": \"ullamco minim\",\n    \"id\": -64473739,\n    \"name\": \"ex dolore aliquip nisi\",\n    \"price\": 63794935.25015864,\n    \"remainingStock\": 70889336\n  }\n}"
								}
							]
						},
						{
							"name": "Add new item",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has required fields: code, data, and message\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData).to.have.all.keys('code', 'data', 'message');",
											"});",
											"",
											"",
											"pm.test(\"The data object contains the required fields\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.data).to.exist.and.to.be.an('object');",
											"",
											"    const requiredFields = ['createdBy', 'createdDate', 'id', 'name', 'price', 'remainingStock', 'updatedBy', 'updatedDate'];",
											"",
											"    requiredFields.forEach(function(field) {",
											"        pm.expect(responseData.data).to.have.property(field);",
											"    });",
											"});",
											"",
											"",
											"pm.test(\"Price must be a non-negative number\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.data).to.have.property('price').that.is.a('number').and.is.at.least(0, \"Price should be non-negative\");",
											"});",
											"",
											"",
											"pm.test(\"The id must be a positive integer\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.data).to.exist.and.to.be.an('object');",
											"    pm.expect(responseData.data.id).to.be.a('number').and.to.be.above(0, \"id should be a positive integer\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Sketcher Walker 2.0\",\n  \"price\": 10756357.472706735\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/items",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"items"
									]
								}
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"aute ut Excepteur mollit exercitation\",\n  \"price\": 10756357.472706735\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/v1/items",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v1",
												"items"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 39435194,\n  \"message\": \"ex\",\n  \"data\": {\n    \"createdDate\": \"1976-09-12T22:39:17.130Z\",\n    \"updatedDate\": \"1996-04-01T15:23:18.040Z\",\n    \"updatedBy\": \"ex elit proident\",\n    \"createdBy\": \"ullamco minim\",\n    \"id\": -64473739,\n    \"name\": \"ex dolore aliquip nisi\",\n    \"price\": 63794935.25015864,\n    \"remainingStock\": 70889336\n  }\n}"
								}
							]
						}
					]
				},
				{
					"name": "inventories",
					"item": [
						{
							"name": "{id}",
							"item": [
								{
									"name": "Get inventory by ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"",
													"pm.test(\"Response has the required fields: code, data, and message\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData).to.have.all.keys('code', 'data', 'message');",
													"});",
													"",
													"",
													"pm.test(\"Validate the data object\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData.data).to.exist.and.to.be.an('object');",
													"",
													"    pm.expect(responseData.data).to.have.all.keys('createdBy', 'createdDate', 'id', 'itemId', 'itemName', 'quantity', 'type', 'updatedBy', 'updatedDate');",
													"",
													"    pm.expect(responseData.data.createdBy).to.be.a('string');",
													"    pm.expect(responseData.data.createdDate).to.be.a('string');",
													"    pm.expect(responseData.data.id).to.be.a('number');",
													"    pm.expect(responseData.data.itemId).to.be.a('number');",
													"    pm.expect(responseData.data.itemName).to.be.a('string');",
													"    pm.expect(responseData.data.quantity).to.be.a('number');",
													"    pm.expect(responseData.data.type).to.be.a('string');",
													"    pm.expect(responseData.data.updatedBy).to.be.a('string');",
													"    pm.expect(responseData.data.updatedDate).to.be.a('string');",
													"});",
													"",
													"",
													"pm.test(\"ItemName must be a non-empty string\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData.data).to.exist;",
													"    pm.expect(responseData.data.itemName).to.be.a('string').and.to.have.lengthOf.at.least(1, \"ItemName should not be empty\");",
													"});",
													"",
													"",
													"pm.test(\"Quantity is a non-negative integer\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData.data).to.exist.and.to.be.an('object');",
													"    pm.expect(responseData.data.quantity).to.be.a('number').and.to.be.at.least(0, \"Quantity should be a non-negative integer\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/v1/inventories/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v1",
												"inventories",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "2",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/v1/inventories/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v1",
														"inventories",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"code\": 92673422,\n  \"message\": \"pariatur\",\n  \"data\": {\n    \"createdDate\": \"2019-02-04T20:10:25.456Z\",\n    \"updatedDate\": \"1956-10-02T16:35:27.521Z\",\n    \"updatedBy\": \"Lorem velit amet\",\n    \"createdBy\": \"eiusmod sit\",\n    \"id\": -85317653,\n    \"itemId\": -56782210,\n    \"itemName\": \"dolor dolore dolor in\",\n    \"quantity\": 88080790,\n    \"type\": \"W\"\n  }\n}"
										}
									]
								},
								{
									"name": "Delete inventory by ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.expect(pm.response.code).to.eql(200);",
													"});",
													"",
													"",
													"pm.test(\"Response has a valid Content-Type header\", function () {",
													"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');",
													"});",
													"",
													"",
													"pm.test(\"Response contains a message field\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData).to.have.property('message');",
													"});",
													"",
													"",
													"pm.test(\"Code is a non-negative integer\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData.code).to.be.a('number').and.to.be.at.least(0);",
													"});",
													"",
													"",
													"pm.test(\"The data field must be null\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData.data).to.be.null;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/v1/inventories/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v1",
												"inventories",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "1",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/v1/inventories/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v1",
														"inventories",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"code\": 55124015,\n  \"message\": \"commodo est laborum Duis\",\n  \"data\": \"labore\"\n}"
										}
									]
								}
							]
						},
						{
							"name": "Get all inventories with pagination",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"",
											"pm.test(\"Validate the structure of the data object\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.data).to.exist.and.to.be.an('object');",
											"    pm.expect(responseData.data.content).to.exist.and.to.be.an('array');",
											"    pm.expect(responseData.data.page).to.exist.and.to.be.an('object');",
											"",
											"    responseData.data.content.forEach(item => {",
											"        pm.expect(item).to.be.an('object');",
											"        pm.expect(item).to.have.all.keys('createdBy', 'createdDate', 'id', 'itemId', 'itemName', 'quantity', 'type', 'updatedBy', 'updatedDate');",
											"        pm.expect(item.createdBy).to.be.a('string');",
											"        pm.expect(item.createdDate).to.be.a('string');",
											"        pm.expect(item.id).to.be.a('number');",
											"        pm.expect(item.itemId).to.be.a('number');",
											"        pm.expect(item.itemName).to.be.a('string');",
											"        pm.expect(item.quantity).to.be.a('number');",
											"        pm.expect(item.type).to.be.a('string');",
											"        pm.expect(item.updatedBy).to.be.a('string');",
											"        pm.expect(item.updatedDate).to.be.a('string');",
											"    });",
											"",
											"    pm.expect(responseData.data.page).to.have.all.keys('number', 'size', 'totalElements', 'totalPages');",
											"    pm.expect(responseData.data.page.number).to.be.a('number');",
											"    pm.expect(responseData.data.page.size).to.be.a('number');",
											"    pm.expect(responseData.data.page.totalElements).to.be.a('number');",
											"    pm.expect(responseData.data.page.totalPages).to.be.a('number');",
											"});",
											"",
											"",
											"pm.test(\"Content is an array and contains at least one inventory item\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.data).to.have.property('content').that.is.an('array').and.has.lengthOf.at.least(1, \"Content array should contain at least one inventory item\");",
											"});",
											"",
											"",
											"pm.test(\"Validate that each inventory item has the required fields\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.data).to.have.property('content').that.is.an('array');",
											"",
											"    responseData.data.content.forEach(item => {",
											"        pm.expect(item).to.be.an('object');",
											"        pm.expect(item).to.have.all.keys('createdBy', 'createdDate', 'id', 'itemId', 'itemName', 'quantity', 'type', 'updatedBy', 'updatedDate');",
											"    });",
											"});",
											"",
											"",
											"pm.test(\"Quantity is a non-negative integer\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.data.content).to.be.an('array');",
											"",
											"    responseData.data.content.forEach(item => {",
											"        pm.expect(item.quantity).to.be.a('number').and.to.be.at.least(0, \"Quantity must be a non-negative integer\");",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/inventories?page=0&size=20",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"inventories"
									],
									"query": [
										{
											"key": "page",
											"value": "0",
											"description": "Zero-based page index (0..N)"
										},
										{
											"key": "size",
											"value": "20",
											"description": "The size of the page to be returned"
										}
									]
								}
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/v1/inventories?page=0&size=20&sort=incididunt ea",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v1",
												"inventories"
											],
											"query": [
												{
													"key": "page",
													"value": "0",
													"description": "Zero-based page index (0..N)"
												},
												{
													"key": "size",
													"value": "20",
													"description": "The size of the page to be returned"
												},
												{
													"key": "sort",
													"value": "incididunt ea",
													"description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 6992210,\n  \"message\": \"non elit\",\n  \"data\": {\n    \"content\": [\n      {\n        \"createdDate\": \"1956-05-14T11:02:16.232Z\",\n        \"updatedDate\": \"1981-11-21T19:49:59.299Z\",\n        \"updatedBy\": \"nulla exercitation enim id\",\n        \"createdBy\": \"ut occaecat labore\",\n        \"id\": 90106476,\n        \"itemId\": -566298,\n        \"itemName\": \"et nostrud\",\n        \"quantity\": -57515693,\n        \"type\": \"T\"\n      },\n      {\n        \"createdDate\": \"1957-12-25T17:52:03.514Z\",\n        \"updatedDate\": \"1988-03-02T11:02:04.417Z\",\n        \"updatedBy\": \"sunt quis minim dolor deserunt\",\n        \"createdBy\": \"dolor ad occaecat\",\n        \"id\": 4416847,\n        \"itemId\": 82208205,\n        \"itemName\": \"ipsum ex Duis\",\n        \"quantity\": -97799096,\n        \"type\": \"T\"\n      }\n    ],\n    \"page\": {\n      \"size\": 95692173,\n      \"number\": -1042809,\n      \"totalElements\": 38252027,\n      \"totalPages\": -74043307\n    }\n  }\n}"
								}
							]
						},
						{
							"name": "Update an existing inventory record",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.eql(200);",
											"});",
											"",
											"",
											"pm.test(\"Validate the 'data' object structure\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.data).to.be.an('object').that.includes.all.keys('createdBy', 'createdDate', 'id', 'itemId', 'itemName', 'quantity', 'type', 'updatedBy', 'updatedDate');",
											"",
											"    // Validate types of properties in the 'data' object",
											"    pm.expect(responseData.data.createdBy).to.be.a('string');",
											"    pm.expect(responseData.data.createdDate).to.be.a('string');",
											"    pm.expect(responseData.data.id).to.be.a('number');",
											"    pm.expect(responseData.data.itemId).to.be.a('number');",
											"    pm.expect(responseData.data.itemName).to.be.a('string');",
											"    pm.expect(responseData.data.quantity).to.be.a('number');",
											"    pm.expect(responseData.data.type).to.be.a('string');",
											"    pm.expect(responseData.data.updatedBy).to.be.a('string');",
											"    pm.expect(responseData.data.updatedDate).to.be.a('string');",
											"});",
											"",
											"",
											"pm.test(\"Quantity must be a non-negative integer\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.data).to.exist.and.to.be.an('object');",
											"    pm.expect(responseData.data.quantity).to.exist.and.to.be.a('number').and.to.be.at.least(0, \"Quantity should be a non-negative integer\");",
											"});",
											"",
											"",
											"pm.test(\"CreatedDate and UpdatedDate are in valid date format\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    ",
											"    const isValidDate = (dateString) => {",
											"        const date = new Date(dateString);",
											"        return !isNaN(date.getTime());",
											"    };",
											"",
											"    pm.expect(isValidDate(responseData.data.createdDate)).to.be.true;",
											"    pm.expect(isValidDate(responseData.data.updatedDate)).to.be.true;",
											"});",
											"",
											"",
											"pm.test(\"Message is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.message).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": 3,\n  \"quantity\": 77273941,\n  \"type\": \"T\",\n  \"itemId\": 3\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/inventories",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"inventories"
									]
								}
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": 25381198,\n  \"quantity\": 77273941,\n  \"type\": \"T\",\n  \"itemId\": -83898846\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/v1/inventories",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v1",
												"inventories"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 92673422,\n  \"message\": \"pariatur\",\n  \"data\": {\n    \"createdDate\": \"2019-02-04T20:10:25.456Z\",\n    \"updatedDate\": \"1956-10-02T16:35:27.521Z\",\n    \"updatedBy\": \"Lorem velit amet\",\n    \"createdBy\": \"eiusmod sit\",\n    \"id\": -85317653,\n    \"itemId\": -56782210,\n    \"itemName\": \"dolor dolore dolor in\",\n    \"quantity\": 88080790,\n    \"type\": \"W\"\n  }\n}"
								}
							]
						},
						{
							"name": "Create new inventory record (Top-Up or Withdrawal)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"",
											"pm.test(\"Response contains a 'code' field with a value of 0\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.have.property('code', 0);",
											"});",
											"",
											"",
											"pm.test(\"The data object is present and contains the required fields\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.data).to.exist;",
											"    pm.expect(responseData.data).to.have.all.keys('createdBy', 'createdDate', 'id', 'itemId', 'itemName', 'quantity', 'type', 'updatedBy', 'updatedDate');",
											"});",
											"",
											"",
											"pm.test(\"Item ID is a non-negative integer\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.data).to.exist;",
											"    pm.expect(responseData.data.itemId).to.be.a('number').and.to.be.at.least(0, \"Item ID should be a non-negative integer\");",
											"});",
											"",
											"",
											"pm.test(\"Quantity is a non-negative integer\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.data).to.exist.and.to.be.an('object');",
											"    pm.expect(responseData.data.quantity).to.be.a('number').and.to.be.at.least(0, \"Quantity should not be negative\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"itemId\": 6,\n  \"quantity\": 88439738,\n  \"type\": \"W\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/inventories",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"inventories"
									]
								}
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"itemId\": -45265407,\n  \"quantity\": 88439738,\n  \"type\": \"W\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/v1/inventories",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v1",
												"inventories"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 92673422,\n  \"message\": \"pariatur\",\n  \"data\": {\n    \"createdDate\": \"2019-02-04T20:10:25.456Z\",\n    \"updatedDate\": \"1956-10-02T16:35:27.521Z\",\n    \"updatedBy\": \"Lorem velit amet\",\n    \"createdBy\": \"eiusmod sit\",\n    \"id\": -85317653,\n    \"itemId\": -56782210,\n    \"itemName\": \"dolor dolore dolor in\",\n    \"quantity\": 88080790,\n    \"type\": \"W\"\n  }\n}"
								}
							]
						}
					]
				}
			]
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080"
		}
	]
}